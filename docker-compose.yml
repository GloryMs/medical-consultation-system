# docker-compose.yml - Complete configuration with all services
version: '3.8'

services:
  # Database Service
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: user1
      POSTGRES_PASSWORD: user1
      #      POSTGRES_MULTIPLE_DATABASES: medical_auth_db,medical_patient_db,medical_doctor_db,medical_admin_db,medical_payment_db,medical_notification_db
      GDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - medical-network
    restart: unless-stopped
#  postgres:
#    image: postgres:15
#    container_name: medical-postgres
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_MULTIPLE_DATABASES: medical_auth_db,medical_patient_db,medical_doctor_db,medical_admin_db,medical_payment_db,medical_notification_db
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#    networks:
#      - medical-network
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    volumes:
      - pgadmin:/var/lib/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - medical-network
    restart: unless-stopped



  # Message Broker Services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: medical-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - medical-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: medical-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: medical-redis
    ports:
      - "6379:6379"
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Discovery
  eureka-server:
    build: ./eureka-server
    container_name: medical-eureka-server
    ports:
      - "8761:8761"
    networks:
      - medical-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: medical-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JWT_SECRET: shdkjdjlkERFSGBS12377ggdggd453737@KKKK$44DFDJFJKDJKdsjdhsjdhhdfkdfndpp!mmm?mmjjdjKJFKJDHFKJD
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service
  auth-service:
    build: ./auth-service
    container_name: medical-auth-service
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_auth_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JWT_SECRET: shdkjdjlkERFSGBS12377ggdggd453737@KKKK$44DFDJFJKDJKdsjdhsjdhhdfkdfndpp!mmm?mmjjdjKJFKJDHFKJD
      JWT_EXPIRATION: 86400000
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Patient Service
  patient-service:
    build: ./patient-service
    container_name: medical-patient-service
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_patient_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Doctor Service
  doctor-service:
    build: ./doctor-service
    container_name: medical-doctor-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_doctor_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Service
  admin-service:
    build: ./admin-service
    container_name: medical-admin-service
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_admin_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: medical-payment-service
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Integration Service
  integration-service:
    build: ./integration-service
    container_name: medical-integration-service
    ports:
      - "8086:8086"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: medical-notification-service
    ports:
      - "8087:8087"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_notification_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      # Email configuration - Update these with real SMTP settings
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: your-email@gmail.com
      SPRING_MAIL_PASSWORD: your-app-password
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

#  # Config Server (Optional - for centralized configuration)
#  config-server:
#    build: ./config-server
#    container_name: medical-config-server
#    ports:
#      - "8888:8888"
#    depends_on:
#      eureka-server:
#        condition: service_healthy
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
#    networks:
#      - medical-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 40s

#  # Monitoring - Prometheus (Optional)
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: medical-prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#    networks:
#      - medical-network
#
#  # Monitoring - Grafana (Optional)
#  grafana:
#    image: grafana/grafana:latest
#    container_name: medical-grafana
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - grafana_data:/var/lib/grafana
#    depends_on:
#      - prometheus
#    networks:
#      - medical-network

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  medical-network:
    driver: bridge