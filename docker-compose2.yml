# docker-compose.yml - Complete configuration with all services
name: medical-system
services:
  # Database Service
  postgres:
    container_name: postgres_container12
    image: postgres
    environment:
      POSTGRES_USER: user1
      POSTGRES_PASSWORD: user1
      #      POSTGRES_MULTIPLE_DATABASES: medical_auth_db,medical_patient_db,medical_doctor_db,medical_admin_db,medical_payment_db,medical_notification_db
      GDATA: /data/postgres
    volumes:
      - /medical-system-compose/postgres_data:/data/postgres
      - /medical-system-compose/postgres_data_lib:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - medical-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container12
    image: dpage/pgadmin4
    volumes:
      - /medical-system-compose/pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - medical-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: medical-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - medical-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: medical-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.16.1.122:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "172.16.1.122:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: medical-kafka-ui
    depends_on:
      - kafka  # Use your actual Kafka service name
    ports:
      - "8090:8080"  # Changed port to avoid conflict with your API Gateway
    environment:
      KAFKA_CLUSTERS_0_NAME: medical-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - medical-network
    restart: unless-stopped

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: medical-redis
    ports:
      - "6379:6379"
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

#################################### Micro-Services #####################################
  # Service Discovery
  eureka-server:
    build: ./eureka-server
    container_name: medical-eureka-server
    ports:
      - "8761:8761"
    networks:
      - medical-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: medical-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JWT_SECRET: shdkjdjlkERFSGBS12377ggdggd453737@KKKK$44DFDJFJKDJKdsjdhsjdhhdfkdfndpp!mmm?mmjjdjKJFKJDHFKJD
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Config Service
  config-service:
    build: ./config-service
    container_name: medical-config-service
    ports:
      - "8088:8088"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_config_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service
  auth-service:
    build: ./auth-service
    container_name: medical-auth-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_auth_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JWT_SECRET: shdkjdjlkERFSGBS12377ggdggd453737@KKKK$44DFDJFJKDJKdsjdhsjdhhdfkdfndpp!mmm?mmjjdjKJFKJDHFKJD
      JWT_EXPIRATION: 86400000
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Patient Service
  patient-service:
    build: ./patient-service
    container_name: medical-patient-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - postgres
    volumes:
      - /patient_upload:/uploads:rw
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_patient_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Doctor Service
  doctor-service:
    build: ./doctor-service
    container_name: medical-doctor-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - postgres
    volumes:
      - /doctors_reports:/pdf-reports:rw
      - /temp_doctors_reports:/pdf-reports/temp:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_doctor_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Service
  admin-service:
    build: ./admin-service
    container_name: medical-admin-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_admin_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: medical-payment-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_payment_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Messaging Service
  messaging-service:
    build: ./messaging-service
    container_name: medical-messaging-service
    ports:
      - "8095:8095"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_messaging_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Integration Service
  integration-service:
    build: ./integration-service
    container_name: medical-integration-service
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: medical-notification-service
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/medical_notification_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: user1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      # Email configuration - Update these with real SMTP settings
#      SPRING_MAIL_HOST: smtp.gmail.com
#      SPRING_MAIL_PORT: 587
#      SPRING_MAIL_USERNAME: your-email@gmail.com
#      SPRING_MAIL_PASSWORD: your-app-password
#      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
#      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.16.1.122:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


# Volumes for persistent data
volumes:
  kafka-data:
    driver: local
#  postgres_data_lib:
#  pgadmin_data:

#  prometheus_data:
#    driver: local
#  grafana_data:
#    driver: local

# Networks
networks:
  medical-network:
    driver: bridge